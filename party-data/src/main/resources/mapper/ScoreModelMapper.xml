<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.ccu.data.exam.ScoreModelMapper" >
  <resultMap id="BaseResultMap" type="cn.edu.ccu.model.exam.ScoreModel" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="exam_id" property="examId" jdbcType="INTEGER" />
    <result column="score" property="score" jdbcType="DOUBLE" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="last_modify_time" property="lastModifyTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cn.edu.ccu.model.exam.ScoreModel" extends="BaseResultMap" >
    <result column="detail" property="detail" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, exam_id, score, start_time, end_time, create_time, last_modify_time
  </sql>
  <sql id="Blob_Column_List" >
    detail
  </sql>

    <select id="checkIsTested" parameterType="Map" resultType="int">
        select count(1) from score
        <where>
            user_id = #{userId} and exam_id = #{examId}
        </where>
    </select>
    <select id="getLastestExam"  parameterType="Map" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from score
        <where>
            user_id = #{userId} and exam_id = #{examId}
        </where>
        order by create_time desc limit 1
    </select>

    <resultMap id="withExam" type="cn.edu.ccu.model.exam.ScoreModel" extends="BaseResultMap">
        <association property="examModel" javaType="cn.edu.ccu.model.exam.ExamModel">
            <id column="exam_id" property="id"/>
            <result column="exam_name" property="name"/>
            <result column="exam_score" property="score"/>
        </association>
        <association property="studentModel" javaType="cn.edu.ccu.model.student.StudentModel">
            <id column="user_id" property="id"/>
            <result column="student_name" property="name"/>
        </association>
    </resultMap>
    <select id="select" parameterType="Map" resultMap="withExam">
        SELECT
         s.id, s.user_id, s.exam_id, s.score, s.start_time, s.end_time, s.create_time, s.last_modify_time,
         e.`name` exam_name,e.score exam_score,st.`name` student_name
         FROM score s LEFT JOIN exam e ON e.`id`=s.`exam_id` LEFT JOIN student st ON st.`id`=s.`user_id`
         <where>
             (s.end_time IS NOT NULL OR NOW() > e.`end_time`)
             <if test="userId != null">
                 and s.user_id = #{userId}
             </if>
             <if test="studentName != null">
                 and st.name like concat("%",#{studentName},"%")
             </if>
         </where>
        order by s.create_time  desc
     </select>
    <select id="count" parameterType="Map" resultType="int">
        SELECT
       count(1)
        FROM score s LEFT JOIN exam e ON e.`id`=s.`exam_id` LEFT JOIN student st ON st.`id`=s.`user_id`
        <where>
            (s.end_time IS NOT NULL OR NOW() > e.`end_time`)
            <if test="userId != null">
                and s.user_id = #{userId}
            </if>
            <if test="studentName != null">
                and st.name like concat("%",#{studentName},"%")
            </if>
        </where>
    </select>

    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from score
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from score
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="cn.edu.ccu.model.exam.ScoreModel" >
    insert into score (id, user_id, exam_id, 
      score, start_time, end_time, 
      create_time, last_modify_time, detail
      )
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, #{examId,jdbcType=INTEGER},
      #{score,jdbcType=DOUBLE}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{lastModifyTime,jdbcType=TIMESTAMP}, #{detail,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.ccu.model.exam.ScoreModel" >
    insert into score
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="examId != null" >
        exam_id,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="lastModifyTime != null" >
        last_modify_time,
      </if>
      <if test="detail != null" >
        detail,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="examId != null" >
        #{examId,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        #{score,jdbcType=DOUBLE},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastModifyTime != null" >
        #{lastModifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="detail != null" >
        #{detail,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.ccu.model.exam.ScoreModel" >
    update score
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="examId != null" >
        exam_id = #{examId,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=DOUBLE},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastModifyTime != null" >
        last_modify_time = #{lastModifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="detail != null" >
        detail = #{detail,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.ccu.model.exam.ScoreModel" >
    update score
    set user_id = #{userId,jdbcType=INTEGER},
      exam_id = #{examId,jdbcType=INTEGER},
      score = #{score,jdbcType=DOUBLE},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      last_modify_time = #{lastModifyTime,jdbcType=TIMESTAMP},
      detail = #{detail,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.ccu.model.exam.ScoreModel" >
    update score
    set user_id = #{userId,jdbcType=INTEGER},
      exam_id = #{examId,jdbcType=INTEGER},
      score = #{score,jdbcType=DOUBLE},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      last_modify_time = #{lastModifyTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>